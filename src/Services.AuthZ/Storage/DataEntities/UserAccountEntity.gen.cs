//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Common;
using Common.Storage.DataEntities;
using Services.DataContracts;

namespace Services.AuthZ.Storage.DataEntities
{
    /// <summary>
    /// An azure storage table definition for an <see cref="UserAccount" />
    /// </summary>
    internal partial class UserAccountEntity : UserAccountEntityBase { }

    internal abstract class UserAccountEntityBase : KeyedEntity
    {
        /// <summary>
        /// Creates a new instance of the <see cref="UserAccountEntity" /> class.
        /// </summary>
        public UserAccountEntityBase()
        {
            this.RowKey = EntityHelper.CreateRowKey();
        }

        /// <summary>
        /// Gets or sets the forenames
        /// </summary>
        public string Forenames { get; set; }

        /// <summary>
        /// Gets or sets the surname
        /// </summary>
        public string Surname { get; set; }

        /// <summary>
        /// Gets or sets the email
        /// </summary>
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the username
        /// </summary>
        public string Username { get; set; }

        /// <summary>
        /// Gets or sets the passwordhash
        /// </summary>
        public string PasswordHash { get; set; }

        /// <summary>
        /// Gets or sets the roles
        /// </summary>
        public string Roles { get; set; }

        /// <summary>
        /// Gets or sets the signaturehash
        /// </summary>
        public string SignatureHash { get; set; }

        /// <summary>
        /// Gets or sets the mobilephone
        /// </summary>
        public string MobilePhone { get; set; }

        /// <summary>
        /// Gets or sets the address
        /// </summary>
        public string Address { get; set; }

        /// <summary>
        /// Gets or sets the isregistered
        /// </summary>
        public string IsRegistered { get; set; }


        /// <summary>
        /// Gets an entity from the <see cref="IUserAccount" />.
        /// </summary>
        public static UserAccountEntity FromDto(IUserAccount dto)
        {
            Guard.NotNull(() => dto, dto);

            return new UserAccountEntity
            {
                Id = EntityHelper.SerializeForStorage(dto.Id),
                Forenames = EntityHelper.SerializeForStorage(dto.Forenames),
                Surname = EntityHelper.SerializeForStorage(dto.Surname),
                Email = EntityHelper.SerializeForStorage(dto.Email),
                Username = EntityHelper.SerializeForStorage(dto.Username),
                PasswordHash = EntityHelper.SerializeForStorage(dto.PasswordHash),
                Roles = EntityHelper.SerializeForStorage(dto.Roles),
                MobilePhone = EntityHelper.SerializeForStorage(dto.MobilePhone),
                Address = EntityHelper.SerializeForStorage(dto.Address),
                IsRegistered = EntityHelper.SerializeForStorage(dto.IsRegistered),
            };
        }

        /// <summary>
        /// Gets the <see cref="IUserAccount" /> from the entity.
        /// </summary>
        public virtual IUserAccount ToDto()
        {
            var dto = new UserAccount
            {
                Id = EntityHelper.DeserializeFromStorage(this.Id, string.Empty),
                Forenames = EntityHelper.DeserializeFromStorage(this.Forenames, String.Empty),
                Surname = EntityHelper.DeserializeFromStorage(this.Surname, String.Empty),
                Email = EntityHelper.DeserializeFromStorage(this.Email, String.Empty),
                Username = EntityHelper.DeserializeFromStorage(this.Username, String.Empty),
                PasswordHash = EntityHelper.DeserializeFromStorage(this.PasswordHash, String.Empty),
                Roles = EntityHelper.DeserializeFromStorage(this.Roles, String.Empty),
                MobilePhone = EntityHelper.DeserializeFromStorage(this.MobilePhone, String.Empty),
                Address = EntityHelper.DeserializeFromStorage(this.Address, new DataContracts.Address()),
                IsRegistered = EntityHelper.DeserializeFromStorage(this.IsRegistered, new System.Boolean()),
            };

            return dto;
        }

        /// <summary>
        /// Merges the properties from the <see cref="entity"/> into this entity
        /// </summary>
        /// <param name="entity">The entity to merge</param>
        public override void Merge(KeyedEntity entity)
        {
            Guard.NotNull(() => entity, entity);

            var mergeEntity = entity as UserAccountEntity;
            if (mergeEntity == null)
                return;

            var thisDto = this.ToDto();
            var mergeDto = mergeEntity.ToDto();

            // Compare to see if we need to update changed values (null) values are ignored in persistence
            thisDto.Forenames = mergeDto.Forenames.HasValue() ? mergeDto.Forenames : thisDto.Forenames;
            thisDto.Surname = mergeDto.Surname.HasValue() ? mergeDto.Surname : thisDto.Surname;
            thisDto.Email = mergeDto.Email.HasValue() ? mergeDto.Email : thisDto.Email;
            thisDto.Username = mergeDto.Username.HasValue() ? mergeDto.Username : thisDto.Username;
            thisDto.PasswordHash = mergeDto.PasswordHash.HasValue() ? mergeDto.PasswordHash : thisDto.PasswordHash;
            thisDto.Roles = mergeDto.Roles.HasValue() ? mergeDto.Roles : thisDto.Roles;
            thisDto.MobilePhone = mergeDto.MobilePhone.HasValue() ? mergeDto.MobilePhone : thisDto.MobilePhone;
            thisDto.Address = mergeDto.Address;
            thisDto.IsRegistered = mergeDto.IsRegistered;

            //Convert back to entity
            var thisEntity = FromDto(thisDto);
            this.Forenames = thisEntity.Forenames;
            this.Surname = thisEntity.Surname;
            this.Email = thisEntity.Email;
            this.Username = thisEntity.Username;
            this.PasswordHash = thisEntity.PasswordHash;
            this.Roles = thisEntity.Roles;
            this.SignatureHash = thisEntity.SignatureHash;
            this.MobilePhone = thisEntity.MobilePhone;
            this.Address = thisEntity.Address;
            this.IsRegistered = thisEntity.IsRegistered;
        }
    }
}

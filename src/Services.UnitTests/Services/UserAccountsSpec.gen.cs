//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Net;
using Common.Services;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using Services.AuthZ.Services;
using Services.AuthZ.Workflow;
using Services.MessageContracts;
using ServiceStack;
using ServiceStack.Web;
using Testing.Common;

namespace Services.UnitTests.Services
{
    /// <summary>
    /// Tests the <see cref="UserAccounts"/> service interface class.
    /// </summary>
    /// <remarks>
    /// These tests are verifying basic plumbing, things like:
    /// 1. Rudimentary parameter validation (existence only)
    /// 2. Passing data through to workflow classes.
    /// 3. Handling of exceptions from workflow classes.
    /// 4. Returning correct HTTP response codes.
    /// </remarks>
    public partial class UserAccountsSpec
    {
        private static readonly IAssertion Assert = new Assertion();

        [TestClass]
        public partial class GivenTheUserAccountsService
        {
            private UserAccounts service;
            private Mock<IUserAccountsManager> useraccountsManager;

            [TestInitialize]
            public void InitalizeContext()
            {
                this.useraccountsManager = new Mock<IUserAccountsManager>();
                this.service = new UserAccounts
                {
                    UserAccountsManager = this.useraccountsManager.Object,
                };
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenGetGetUserAccountWithNullRequest_ThenThrows()
            {
                Assert.Throws<HttpError>("Parameter cannot be null", () =>
                    this.service.Get((GetUserAccount)null));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenGetGetUserAccountWithNullManager_ThenThrows()
            {
                this.useraccountsManager.Setup(man => man.GetUserAccount(It.IsAny<IRequest>(), It.IsAny<GetUserAccount>()))
                    .Returns((GetUserAccountResponse)null);

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.InternalServerError), () =>
                    this.service.Get(new GetUserAccount()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenGetGetUserAccount_ThenManagerReturnsUserAccount()
            {
                var response = new GetUserAccountResponse();
                this.useraccountsManager.Setup(man => man.GetUserAccount(It.IsAny<IRequest>(), It.IsAny<GetUserAccount>()))
                    .Returns(response);

                var result = this.service.Get(new GetUserAccount());

                this.useraccountsManager.Verify(man => man.GetUserAccount(It.IsAny<IRequest>(), It.IsAny<GetUserAccount>()), Times.Once());
                Assert.Equal(response, result);
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenGetGetUserAccountAndManagerThrowsResourceNotFound_ThenThrowsHttpNotFound()
            {
                this.useraccountsManager.Setup(man => man.GetUserAccount(It.IsAny<IRequest>(), It.IsAny<GetUserAccount>()))
                    .Throws(new ResourceNotFoundException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.NotFound), () =>
                    this.service.Get(new GetUserAccount()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenGetGetUserAccountAndManagerThrowsRuleViolation_ThenThrowsHttpBadRequest()
            {
                this.useraccountsManager.Setup(man => man.GetUserAccount(It.IsAny<IRequest>(), It.IsAny<GetUserAccount>()))
                    .Throws(new RuleViolationException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.BadRequest), () =>
                    this.service.Get(new GetUserAccount()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenGetGetUserAccountAndManagerThrowsUnexpected_ThenThrowsHttpInternalServer()
            {
                this.useraccountsManager.Setup(man => man.GetUserAccount(It.IsAny<IRequest>(), It.IsAny<GetUserAccount>()))
                    .Throws(new InvalidOperationException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.InternalServerError), () =>
                    this.service.Get(new GetUserAccount()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenGetListUserAccountsWithNullRequest_ThenThrows()
            {
                Assert.Throws<HttpError>("Parameter cannot be null", () =>
                    this.service.Get((ListUserAccounts)null));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenGetListUserAccountsWithNullManager_ThenThrows()
            {
                this.useraccountsManager.Setup(man => man.ListUserAccounts(It.IsAny<IRequest>(), It.IsAny<ListUserAccounts>()))
                    .Returns((ListUserAccountsResponse)null);

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.InternalServerError), () =>
                    this.service.Get(new ListUserAccounts()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenGetListUserAccounts_ThenManagerReturnsUserAccount()
            {
                var response = new ListUserAccountsResponse();
                this.useraccountsManager.Setup(man => man.ListUserAccounts(It.IsAny<IRequest>(), It.IsAny<ListUserAccounts>()))
                    .Returns(response);

                var result = this.service.Get(new ListUserAccounts());

                this.useraccountsManager.Verify(man => man.ListUserAccounts(It.IsAny<IRequest>(), It.IsAny<ListUserAccounts>()), Times.Once());
                Assert.Equal(response, result);
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenGetListUserAccountsAndManagerThrowsResourceNotFound_ThenThrowsHttpNotFound()
            {
                this.useraccountsManager.Setup(man => man.ListUserAccounts(It.IsAny<IRequest>(), It.IsAny<ListUserAccounts>()))
                    .Throws(new ResourceNotFoundException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.NotFound), () =>
                    this.service.Get(new ListUserAccounts()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenGetListUserAccountsAndManagerThrowsRuleViolation_ThenThrowsHttpBadRequest()
            {
                this.useraccountsManager.Setup(man => man.ListUserAccounts(It.IsAny<IRequest>(), It.IsAny<ListUserAccounts>()))
                    .Throws(new RuleViolationException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.BadRequest), () =>
                    this.service.Get(new ListUserAccounts()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenGetListUserAccountsAndManagerThrowsUnexpected_ThenThrowsHttpInternalServer()
            {
                this.useraccountsManager.Setup(man => man.ListUserAccounts(It.IsAny<IRequest>(), It.IsAny<ListUserAccounts>()))
                    .Throws(new InvalidOperationException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.InternalServerError), () =>
                    this.service.Get(new ListUserAccounts()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenPostCreateUserAccountWithNullRequest_ThenThrows()
            {
                Assert.Throws<HttpError>("Parameter cannot be null", () =>
                    this.service.Post((CreateUserAccount)null));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenPostCreateUserAccountWithNullManager_ThenThrows()
            {
                this.useraccountsManager.Setup(man => man.CreateUserAccount(It.IsAny<IRequest>(), It.IsAny<CreateUserAccount>()))
                    .Returns((CreateUserAccountResponse)null);

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.InternalServerError), () =>
                    this.service.Post(new CreateUserAccount()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenPostCreateUserAccount_ThenManagerReturnsUserAccount()
            {
                var response = new CreateUserAccountResponse();
                this.useraccountsManager.Setup(man => man.CreateUserAccount(It.IsAny<IRequest>(), It.IsAny<CreateUserAccount>()))
                    .Returns(response);

                var result = this.service.Post(new CreateUserAccount());

                this.useraccountsManager.Verify(man => man.CreateUserAccount(It.IsAny<IRequest>(), It.IsAny<CreateUserAccount>()), Times.Once());
                Assert.Equal(response, result);
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenPostCreateUserAccountAndManagerThrowsResourceNotFound_ThenThrowsHttpNotFound()
            {
                this.useraccountsManager.Setup(man => man.CreateUserAccount(It.IsAny<IRequest>(), It.IsAny<CreateUserAccount>()))
                    .Throws(new ResourceNotFoundException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.NotFound), () =>
                    this.service.Post(new CreateUserAccount()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenPostCreateUserAccountAndManagerThrowsRuleViolation_ThenThrowsHttpBadRequest()
            {
                this.useraccountsManager.Setup(man => man.CreateUserAccount(It.IsAny<IRequest>(), It.IsAny<CreateUserAccount>()))
                    .Throws(new RuleViolationException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.BadRequest), () =>
                    this.service.Post(new CreateUserAccount()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenPostCreateUserAccountAndManagerThrowsUnexpected_ThenThrowsHttpInternalServer()
            {
                this.useraccountsManager.Setup(man => man.CreateUserAccount(It.IsAny<IRequest>(), It.IsAny<CreateUserAccount>()))
                    .Throws(new InvalidOperationException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.InternalServerError), () =>
                    this.service.Post(new CreateUserAccount()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenPutUpdateUserAccountWithNullRequest_ThenThrows()
            {
                Assert.Throws<HttpError>("Parameter cannot be null", () =>
                    this.service.Put((UpdateUserAccount)null));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenPutUpdateUserAccountWithNullManager_ThenThrows()
            {
                this.useraccountsManager.Setup(man => man.UpdateUserAccount(It.IsAny<IRequest>(), It.IsAny<UpdateUserAccount>()))
                    .Returns((UpdateUserAccountResponse)null);

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.InternalServerError), () =>
                    this.service.Put(new UpdateUserAccount()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenPutUpdateUserAccount_ThenManagerReturnsUserAccount()
            {
                var response = new UpdateUserAccountResponse();
                this.useraccountsManager.Setup(man => man.UpdateUserAccount(It.IsAny<IRequest>(), It.IsAny<UpdateUserAccount>()))
                    .Returns(response);

                var result = this.service.Put(new UpdateUserAccount());

                this.useraccountsManager.Verify(man => man.UpdateUserAccount(It.IsAny<IRequest>(), It.IsAny<UpdateUserAccount>()), Times.Once());
                Assert.Equal(response, result);
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenPutUpdateUserAccountAndManagerThrowsResourceNotFound_ThenThrowsHttpNotFound()
            {
                this.useraccountsManager.Setup(man => man.UpdateUserAccount(It.IsAny<IRequest>(), It.IsAny<UpdateUserAccount>()))
                    .Throws(new ResourceNotFoundException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.NotFound), () =>
                    this.service.Put(new UpdateUserAccount()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenPutUpdateUserAccountAndManagerThrowsRuleViolation_ThenThrowsHttpBadRequest()
            {
                this.useraccountsManager.Setup(man => man.UpdateUserAccount(It.IsAny<IRequest>(), It.IsAny<UpdateUserAccount>()))
                    .Throws(new RuleViolationException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.BadRequest), () =>
                    this.service.Put(new UpdateUserAccount()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenPutUpdateUserAccountAndManagerThrowsUnexpected_ThenThrowsHttpInternalServer()
            {
                this.useraccountsManager.Setup(man => man.UpdateUserAccount(It.IsAny<IRequest>(), It.IsAny<UpdateUserAccount>()))
                    .Throws(new InvalidOperationException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.InternalServerError), () =>
                    this.service.Put(new UpdateUserAccount()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenDeleteDeleteUserAccountWithNullRequest_ThenThrows()
            {
                Assert.Throws<HttpError>("Parameter cannot be null", () =>
                    this.service.Delete((DeleteUserAccount)null));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenDeleteDeleteUserAccountWithNullManager_ThenThrows()
            {
                this.useraccountsManager.Setup(man => man.DeleteUserAccount(It.IsAny<IRequest>(), It.IsAny<DeleteUserAccount>()))
                    .Returns((DeleteUserAccountResponse)null);

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.InternalServerError), () =>
                    this.service.Delete(new DeleteUserAccount()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenDeleteDeleteUserAccount_ThenManagerReturnsUserAccount()
            {
                var response = new DeleteUserAccountResponse();
                this.useraccountsManager.Setup(man => man.DeleteUserAccount(It.IsAny<IRequest>(), It.IsAny<DeleteUserAccount>()))
                    .Returns(response);

                var result = this.service.Delete(new DeleteUserAccount());

                this.useraccountsManager.Verify(man => man.DeleteUserAccount(It.IsAny<IRequest>(), It.IsAny<DeleteUserAccount>()), Times.Once());
                Assert.Equal(response, result);
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenDeleteDeleteUserAccountAndManagerThrowsResourceNotFound_ThenThrowsHttpNotFound()
            {
                this.useraccountsManager.Setup(man => man.DeleteUserAccount(It.IsAny<IRequest>(), It.IsAny<DeleteUserAccount>()))
                    .Throws(new ResourceNotFoundException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.NotFound), () =>
                    this.service.Delete(new DeleteUserAccount()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenDeleteDeleteUserAccountAndManagerThrowsRuleViolation_ThenThrowsHttpBadRequest()
            {
                this.useraccountsManager.Setup(man => man.DeleteUserAccount(It.IsAny<IRequest>(), It.IsAny<DeleteUserAccount>()))
                    .Throws(new RuleViolationException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.BadRequest), () =>
                    this.service.Delete(new DeleteUserAccount()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenDeleteDeleteUserAccountAndManagerThrowsUnexpected_ThenThrowsHttpInternalServer()
            {
                this.useraccountsManager.Setup(man => man.DeleteUserAccount(It.IsAny<IRequest>(), It.IsAny<DeleteUserAccount>()))
                    .Throws(new InvalidOperationException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.InternalServerError), () =>
                    this.service.Delete(new DeleteUserAccount()));
            }

        }
    }
}
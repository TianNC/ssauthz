//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using Common.Reflection;
using Common.Services;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Services.MessageContracts;
using ServiceStack;
using Testing.Common;

namespace Services.IntTests
{
    /// <summary>
    /// Tests the <see cref="UserAccounts"/> service interface class.
    /// </summary>
    /// <remarks>
    /// These tests are verifying basic service connectivity, things like:
    /// 1. Request validation
    /// 2. Basic request and responses.
    /// 3. Handling of exceptions from service.
    /// 4. Returning correct HTTP response codes.
    /// </remarks>
    public partial class UserAccountsSpec
    {
        private static readonly IAssertion Assert = new Assertion();
        private const string RestRoutedNotFoundPartialMessage = "None of the given rest routes matches";

        [TestClass]
        public partial class GivenTheUserAccountsService : GivenTheUserAccountsServiceBase { }

        [TestClass]
        public abstract class GivenTheUserAccountsServiceBase : IntegrationTest
        {
            [TestInitialize]
            public virtual void Initialize()
            {
                base.InitializeContext();
            }


            [TestMethod, TestCategory("Integration")]
            public virtual void WhenGetGetUserAccountWithNullRequest_ThenThrowsNullReference()
            {
                Assert.Throws<NullReferenceException>(() =>
                    Client.Get((GetUserAccount)null));
            }

            [TestMethod, TestCategory("Integration")]
            public virtual void WhenGetGetUserAccountWithEmptyRequest_ThenThrowsRestRouteNotFound()
            {
                Assert.Throws<InvalidOperationException>(RestRoutedNotFoundPartialMessage, () =>
                    Client.Get(new GetUserAccount()));
            }

            [TestMethod, TestCategory("Integration")]
            public virtual void WhenGetGetUserAccountWithNullId_ThenThrowsRestRouteNotFound()
            {
                Assert.Throws<InvalidOperationException>(RestRoutedNotFoundPartialMessage, () =>
                    Client.Get(this.MakeGetUserAccount(new Dictionary<string, string>() { { "Id", null } })));
            }

            [TestMethod, TestCategory("Integration")]
            public virtual void WhenGetGetUserAccountWithEmptyId_ThenRedirectsToReturnAllResources()
            {
                var httpResponse = Client.Get<HttpWebResponse>(this.MakeGetUserAccount(new Dictionary<string, string>() { { "Id", string.Empty } }));

                Assert.Equal(HttpStatusCode.OK, httpResponse.StatusCode);
            }

            [TestMethod, TestCategory("Integration")]
            public virtual void WhenGetGetUserAccountWithUnknownId_ThenThrowsResourceNotFound()
            {
                Assert.Throws<ResourceNotFoundException>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.NotFound), () =>
                    Client.Get(this.MakeGetUserAccount(new Dictionary<string, string>() { { "Id", this.MakeUnknownId() } })));
            }

            [TestMethod, TestCategory("Integration")]
            public virtual void WhenGetGetUserAccount_ThenReturnsResource()
            {
                var created = this.CreateNewUserAccount();
                var fetched = Client.Get(this.MakeGetUserAccount(new Dictionary<string, string> { { "Id", created } }));

                Assert.Equal(created, fetched.UserAccount.Id);

                var httpResponse = Client.Get<HttpWebResponse>(this.MakeGetUserAccount(new Dictionary<string, string> { { "Id", created } }));

                Assert.Equal(HttpStatusCode.OK, httpResponse.StatusCode);
            }

            [TestMethod, TestCategory("Integration")]
            public virtual void WhenGetListUserAccountsWithNullRequest_ThenThrowsNullReference()
            {
                Assert.Throws<NullReferenceException>(() =>
                    Client.Get((ListUserAccounts)null));
            }

            [TestMethod, TestCategory("Integration")]
            public virtual void WhenGetListUserAccountsWithNoUserAccounts_ThenReturnsNoResource()
            {
                var result = Client.Get(this.MakeListUserAccounts());

                Assert.Equal(0, result.UserAccounts.Count());

                var httpResponse = Client.Get<HttpWebResponse>(this.MakeListUserAccounts());

                Assert.Equal(HttpStatusCode.OK, httpResponse.StatusCode);
            }

            [TestMethod, TestCategory("Integration")]
            public virtual void WhenGetListUserAccountsWithMultipleUserAccounts_ThenReturnsAllResources()
            {
                var created1 = this.CreateNewUserAccount();
                var created2 = this.CreateNewUserAccount();
                var created3 = this.CreateNewUserAccount();

                var result = Client.Get(this.MakeListUserAccounts());

                Assert.Equal(3, result.UserAccounts.Count());
                Assert.NotNull(result.UserAccounts.FirstOrDefault(x => x.Id == created1));
                Assert.NotNull(result.UserAccounts.FirstOrDefault(x => x.Id == created2));
                Assert.NotNull(result.UserAccounts.FirstOrDefault(x => x.Id == created3));

                var httpResponse = Client.Get<HttpWebResponse>(this.MakeListUserAccounts());

                Assert.Equal(HttpStatusCode.OK, httpResponse.StatusCode);
            }

            [TestMethod, TestCategory("Integration")]
            public virtual void WhenPostCreateUserAccountWithNullRequest_ThenThrowsNullReference()
            {
                Assert.Throws<NullReferenceException>(() =>
                    Client.Post((CreateUserAccount)null));
            }

            [TestMethod, TestCategory("Integration")]
            public virtual void WhenPostCreateUserAccountWithEmptyRequest_ThenThrowsBadRequest()
            {
                Assert.Throws<InvalidOperationException>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.BadRequest), () =>
                    Client.Post(new CreateUserAccount()));
            }

            [TestMethod, TestCategory("Integration")]
            public virtual void WhenPostCreateUserAccount_ThenCreatesResource()
            {
                var result = Client.Post<HttpWebResponse>(this.MakeCreateUserAccount());

                Assert.Equal(HttpStatusCode.Created, result.StatusCode);
                Assert.True(new Uri(result.GetResponseHeader(HttpHeaders.Location)).LocalPath.StartsWith(result.ResponseUri.LocalPath.WithTrailingSlash()));
            }

            [TestMethod, TestCategory("Integration")]
            public virtual void WhenPutUpdateUserAccountWithNullRequest_ThenThrowsNullReference()
            {
                Assert.Throws<NullReferenceException>(() =>
                    Client.Put((UpdateUserAccount)null));
            }

            [TestMethod, TestCategory("Integration")]
            public virtual void WhenPutUpdateUserAccountWithEmptyRequest_ThenThrowsRestRouteNotFound()
            {
                Assert.Throws<InvalidOperationException>(RestRoutedNotFoundPartialMessage, () =>
                    Client.Put(new UpdateUserAccount()));
            }

            [TestMethod, TestCategory("Integration")]
            public virtual void WhenPutUpdateUserAccountWithNullId_ThenThrowsRestRouteNotFound()
            {
                Assert.Throws<InvalidOperationException>(RestRoutedNotFoundPartialMessage, () =>
                    Client.Put(this.MakeUpdateUserAccount(new Dictionary<string, string>() { { "Id", null } })));
            }

            [TestMethod, TestCategory("Integration")]
            public virtual void WhenPutUpdateUserAccountWithEmptyId_ThenRedirectsToReturnAllResources()
            {
                var httpResponse = Client.Put<HttpWebResponse>(this.MakeUpdateUserAccount(new Dictionary<string, string>() { { "Id", string.Empty } }));

                Assert.Equal(HttpStatusCode.OK, httpResponse.StatusCode);
            }

            [TestMethod, TestCategory("Integration")]
            public virtual void WhenPutUpdateUserAccountWithUnknownId_ThenThrowsResourceNotFound()
            {
                Assert.Throws<ResourceNotFoundException>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.NotFound), () =>
                    Client.Put(this.MakeUpdateUserAccount(new Dictionary<string, string>() { { "Id", this.MakeUnknownId() } })));
            }

            [TestMethod, TestCategory("Integration")]
            public virtual void WhenPutUpdateUserAccount_ThenUpdatesResource()
            {
                var created = this.CreateNewUserAccount();

                var result = Client.Put<HttpWebResponse>(this.MakeUpdateUserAccount(new Dictionary<string, string> { { "Id", created } }));

                Assert.Equal(HttpStatusCode.Accepted, result.StatusCode);
            }

            [TestMethod, TestCategory("Integration")]
            public virtual void WhenDeleteDeleteUserAccountWithNullRequest_ThenThrowsNullReference()
            {
                Assert.Throws<NullReferenceException>(() =>
                    Client.Delete((DeleteUserAccount)null));
            }

            [TestMethod, TestCategory("Integration")]
            public virtual void WhenDeleteDeleteUserAccountWithEmptyRequest_ThenThrowsRestRouteNotFound()
            {
                Assert.Throws<InvalidOperationException>(RestRoutedNotFoundPartialMessage, () =>
                    Client.Delete(new DeleteUserAccount()));
            }

            [TestMethod, TestCategory("Integration")]
            public virtual void WhenDeleteDeleteUserAccountWithNullId_ThenThrowsRestRouteNotFound()
            {
                Assert.Throws<InvalidOperationException>(RestRoutedNotFoundPartialMessage, () =>
                    Client.Delete(this.MakeDeleteUserAccount(new Dictionary<string, string>() { { "Id", null } })));
            }

            [TestMethod, TestCategory("Integration")]
            public virtual void WhenDeleteDeleteUserAccountWithEmptyId_ThenRedirectsToReturnAllResources()
            {
                var httpResponse = Client.Delete<HttpWebResponse>(this.MakeDeleteUserAccount(new Dictionary<string, string>() { { "Id", string.Empty } }));

                Assert.Equal(HttpStatusCode.OK, httpResponse.StatusCode);
            }

            [TestMethod, TestCategory("Integration")]
            public virtual void WhenDeleteDeleteUserAccountWithUnknownId_ThenThrowsResourceNotFound()
            {
                Assert.Throws<ResourceNotFoundException>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.NotFound), () =>
                    Client.Delete(this.MakeDeleteUserAccount(new Dictionary<string, string>() { { "Id", this.MakeUnknownId() } })));
            }

            [TestMethod, TestCategory("Integration")]
            public virtual void WhenDeleteDeleteUserAccount_ThenDeletesResource()
            {
                var created = this.CreateNewUserAccount();

                var result = Client.Delete<HttpWebResponse>(this.MakeDeleteUserAccount(new Dictionary<string, string> { { "Id", created } }));

                Assert.Equal(HttpStatusCode.Accepted, result.StatusCode);
            }


            protected virtual string MakeUnknownId()
            {
                return Guid.NewGuid().ToString();
            }

            protected virtual string CreateNewUserAccount()
            {
                return Client.Post(MakeCreateUserAccount()).UserAccount.Id;
            }

            protected virtual GetUserAccount MakeGetUserAccount(Dictionary<string, string> fields)
            {
                return new GetUserAccount
                {
                    Id = fields.ContainsKey(Reflector<GetUserAccount>.GetPropertyName(x => x.Id)) ? fields[Reflector<GetUserAccount>.GetPropertyName(x => x.Id)] : null,
                };
            }

            protected virtual ListUserAccounts MakeListUserAccounts()
            {
                return new ListUserAccounts();
            }

            protected virtual CreateUserAccount MakeCreateUserAccount()
            {
                return new CreateUserAccount();
            }

            protected virtual UpdateUserAccount MakeUpdateUserAccount(Dictionary<string, string> fields)
            {
                return new UpdateUserAccount
                {
                    Id = fields.ContainsKey(Reflector<UpdateUserAccount>.GetPropertyName(x => x.Id)) ? fields[Reflector<UpdateUserAccount>.GetPropertyName(x => x.Id)] : null,
                };
            }

            protected virtual DeleteUserAccount MakeDeleteUserAccount(Dictionary<string, string> fields)
            {
                return new DeleteUserAccount
                {
                    Id = fields.ContainsKey(Reflector<DeleteUserAccount>.GetPropertyName(x => x.Id)) ? fields[Reflector<DeleteUserAccount>.GetPropertyName(x => x.Id)] : null,
                };
            }

        }
    }
}
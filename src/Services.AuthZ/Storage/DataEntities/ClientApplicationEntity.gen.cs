//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Common;
using Common.Storage.DataEntities;
using Services.DataContracts;

namespace Services.AuthZ.Storage.DataEntities
{
    /// <summary>
    /// An azure storage table definition for an <see cref="ClientApplication" />
    /// </summary>
    internal partial class ClientApplicationEntity : ClientApplicationEntityBase { }

    internal abstract class ClientApplicationEntityBase : KeyedEntity
    {
        /// <summary>
        /// Creates a new instance of the <see cref="ClientApplicationEntity" /> class.
        /// </summary>
        public ClientApplicationEntityBase()
        {
            this.RowKey = EntityHelper.CreateRowKey();
        }

        /// <summary>
        /// Gets or sets the clientidentifier
        /// </summary>
        public string ClientIdentifier { get; set; }

        /// <summary>
        /// Gets or sets the clientsecret
        /// </summary>
        public string ClientSecret { get; set; }

        /// <summary>
        /// Gets or sets the name
        /// </summary>
        public string Name { get; set; }


        /// <summary>
        /// Gets an entity from the <see cref="IClientApplication" />.
        /// </summary>
        public static ClientApplicationEntity FromDto(IClientApplication dto)
        {
            Guard.NotNull(() => dto, dto);

            return new ClientApplicationEntity
            {
                Id = EntityHelper.SerializeForStorage(dto.Id),
                ClientIdentifier = EntityHelper.SerializeForStorage(dto.ClientIdentifier),
                ClientSecret = EntityHelper.SerializeForStorage(dto.ClientSecret),
                Name = EntityHelper.SerializeForStorage(dto.Name),
            };
        }

        /// <summary>
        /// Gets the <see cref="IClientApplication" /> from the entity.
        /// </summary>
        public virtual IClientApplication ToDto()
        {
            var dto = new ClientApplication
            {
                Id = EntityHelper.DeserializeFromStorage(this.Id, string.Empty),
                ClientIdentifier = EntityHelper.DeserializeFromStorage(this.ClientIdentifier, String.Empty),
                ClientSecret = EntityHelper.DeserializeFromStorage(this.ClientSecret, String.Empty),
                Name = EntityHelper.DeserializeFromStorage(this.Name, String.Empty),
            };

            return dto;
        }

        /// <summary>
        /// Merges the properties from the <see cref="entity"/> into this entity
        /// </summary>
        /// <param name="entity">The entity to merge</param>
        public override void Merge(KeyedEntity entity)
        {
            Guard.NotNull(() => entity, entity);

            var mergeEntity = entity as ClientApplicationEntity;
            if (mergeEntity == null)
                return;

            var thisDto = this.ToDto();
            var mergeDto = mergeEntity.ToDto();

            // Compare to see if we need to update changed values (null) values are ignored in persistence
            thisDto.ClientIdentifier = mergeDto.ClientIdentifier.HasValue() ? mergeDto.ClientIdentifier : thisDto.ClientIdentifier;
            thisDto.ClientSecret = mergeDto.ClientSecret.HasValue() ? mergeDto.ClientSecret : thisDto.ClientSecret;
            thisDto.Name = mergeDto.Name.HasValue() ? mergeDto.Name : thisDto.Name;

            //Convert back to entity
            var thisEntity = FromDto(thisDto);
            this.ClientIdentifier = thisEntity.ClientIdentifier;
            this.ClientSecret = thisEntity.ClientSecret;
            this.Name = thisEntity.Name;
        }
    }
}

<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddressValidator_InvalidAddressStreet" xml:space="preserve">
    <value>The 'Street' of the address is not valid for a street</value>
  </data>
  <data name="AddressValidator_InvalidAddressTown" xml:space="preserve">
    <value>The 'Town' of the address is not valid for a town</value>
  </data>
  <data name="ClientApplicationsManager_ApplicationByIdentifierExists" xml:space="preserve">
    <value>A client application with the identifier '{0}' already exists.</value>
  </data>
  <data name="ClientApplicationsManager_ApplicationByNameExists" xml:space="preserve">
    <value>A client application with the name '{0}' already exists.</value>
  </data>
  <data name="CreateAccessTokenValidator_InvalidGrantType" xml:space="preserve">
    <value>The 'GrantType' of the request is invalid. It must be either 'password' for a new access token, or 'refresh_token' to refresh an existing access token</value>
  </data>
  <data name="CreateAccessTokenValidator_InvalidPassword" xml:space="preserve">
    <value>The 'Password' for the request is not a valid password</value>
  </data>
  <data name="CreateAccessTokenValidator_InvalidRefreshToken" xml:space="preserve">
    <value>The 'RefreshToken' for this request is not a valid refresh token</value>
  </data>
  <data name="CreateAccessTokenValidator_InvalidScope" xml:space="preserve">
    <value>The 'Scope' for the request is not a valid scope</value>
  </data>
  <data name="CreateAccessTokenValidator_InvalidUsername" xml:space="preserve">
    <value>The 'Username' for the request is not a valid username</value>
  </data>
  <data name="CreateUserAccountValidator_InvalidAddress" xml:space="preserve">
    <value>The 'Address' for the new account must be included</value>
  </data>
  <data name="CreateUserAccountValidator_InvalidEmail" xml:space="preserve">
    <value>The 'Email' of the new account is not a valid email</value>
  </data>
  <data name="CreateUserAccountValidator_InvalidForenames" xml:space="preserve">
    <value>The 'Forenames' of the new account is not a valid name or series of names</value>
  </data>
  <data name="CreateUserAccountValidator_InvalidMobilePhone" xml:space="preserve">
    <value>The 'Mobile Phone' of the new account is not a valid phone number</value>
  </data>
  <data name="CreateUserAccountValidator_InvalidPasswordHash" xml:space="preserve">
    <value>The 'PasswordHash' for the new account is not a valid hash</value>
  </data>
  <data name="CreateUserAccountValidator_InvalidSurname" xml:space="preserve">
    <value>The 'Surname' of the new account is not a valid name</value>
  </data>
  <data name="CreateUserAccountValidator_InvalidUsername" xml:space="preserve">
    <value>The 'Username' of the new account is not a valid username</value>
  </data>
  <data name="ListUserAccountsValidator_InvalidEmail" xml:space="preserve">
    <value>The 'Email' to search for is not a valid email</value>
  </data>
  <data name="ListUserAccountsValidator_InvalidUsername" xml:space="preserve">
    <value>The 'Username' to search for is not a valid username</value>
  </data>
  <data name="OAuthZServer_UnknownClientIdentifier" xml:space="preserve">
    <value>Client application identifier '{0}' is not known</value>
  </data>
  <data name="UpdateUserAccountValidator_InvalidEmail" xml:space="preserve">
    <value>The 'Email' of the account is not a valid email</value>
  </data>
  <data name="UpdateUserAccountValidator_InvalidForenames" xml:space="preserve">
    <value>The 'Forenames' of the account to update is not valid</value>
  </data>
  <data name="UpdateUserAccountValidator_InvalidId" xml:space="preserve">
    <value>The 'Id' of the account to update is not a valid identifier</value>
  </data>
  <data name="UpdateUserAccountValidator_InvalidMobilePhone" xml:space="preserve">
    <value>The 'Mobile Phone' of the account is not a valid phone number</value>
  </data>
  <data name="UpdateUserAccountValidator_InvalidNewPasswordHash" xml:space="preserve">
    <value>The 'NewPasswordHash' of the account to update is invalid. It must be a hash of the user's new password.</value>
  </data>
  <data name="UpdateUserAccountValidator_InvalidOldPasswordHash" xml:space="preserve">
    <value>The 'OldPasswordHash' of the account to update is invalid. It must be a hash of the users existing password.</value>
  </data>
  <data name="UpdateUserAccountValidator_InvalidSurname" xml:space="preserve">
    <value>The 'Surname' of the account to update is not valid</value>
  </data>
  <data name="UserAccountsManager_NoRolesForParticipant" xml:space="preserve">
    <value>A user account without credentials cannot specify its role.</value>
  </data>
  <data name="UserAccountsManager_PasswordsDontMatch" xml:space="preserve">
    <value>The passwords do not match. Cannot update password.</value>
  </data>
  <data name="UserAccountsManager_UserAccountExistsByEmail" xml:space="preserve">
    <value>A user account with the email '{0}' already exists.</value>
  </data>
  <data name="UserAccountsManager_UserAccountExistsByUsername" xml:space="preserve">
    <value>A user account with the username '{0}' already exists.</value>
  </data>
</root>
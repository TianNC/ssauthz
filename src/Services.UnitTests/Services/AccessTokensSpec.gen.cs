//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Net;
using Common.Services;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using Services.AuthZ.Services;
using Services.AuthZ.Workflow;
using Services.MessageContracts;
using ServiceStack;
using ServiceStack.Web;
using Testing.Common;

namespace Services.UnitTests.Services
{
    /// <summary>
    /// Tests the <see cref="AccessTokens"/> service interface class.
    /// </summary>
    /// <remarks>
    /// These tests are verifying basic plumbing, things like:
    /// 1. Rudimentary parameter validation (existence only)
    /// 2. Passing data through to workflow classes.
    /// 3. Handling of exceptions from workflow classes.
    /// 4. Returning correct HTTP response codes.
    /// </remarks>
    public partial class AccessTokensSpec
    {
        private static readonly IAssertion Assert = new Assertion();

        [TestClass]
        public partial class GivenTheAccessTokensService
        {
            private AccessTokens service;
            private Mock<IAccessTokensManager> accesstokensManager;

            [TestInitialize]
            public void InitalizeContext()
            {
                this.accesstokensManager = new Mock<IAccessTokensManager>();
                this.service = new AccessTokens
                {
                    AccessTokensManager = this.accesstokensManager.Object,
                };
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenPostCreateAccessTokenWithNullRequest_ThenThrows()
            {
                Assert.Throws<HttpError>("Parameter cannot be null", () =>
                    this.service.Post((CreateAccessToken)null));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenPostCreateAccessTokenWithNullManager_ThenThrows()
            {
                this.accesstokensManager.Setup(man => man.CreateAccessToken(It.IsAny<IRequest>(), It.IsAny<CreateAccessToken>()))
                    .Returns((CreateAccessTokenResponse)null);

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.InternalServerError), () =>
                    this.service.Post(new CreateAccessToken()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenPostCreateAccessToken_ThenManagerReturnsAccessToken()
            {
                var response = new CreateAccessTokenResponse();
                this.accesstokensManager.Setup(man => man.CreateAccessToken(It.IsAny<IRequest>(), It.IsAny<CreateAccessToken>()))
                    .Returns(response);

                var result = this.service.Post(new CreateAccessToken());

                this.accesstokensManager.Verify(man => man.CreateAccessToken(It.IsAny<IRequest>(), It.IsAny<CreateAccessToken>()), Times.Once());
                Assert.Equal(response, result);
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenPostCreateAccessTokenAndManagerThrowsResourceNotFound_ThenThrowsHttpNotFound()
            {
                this.accesstokensManager.Setup(man => man.CreateAccessToken(It.IsAny<IRequest>(), It.IsAny<CreateAccessToken>()))
                    .Throws(new ResourceNotFoundException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.NotFound), () =>
                    this.service.Post(new CreateAccessToken()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenPostCreateAccessTokenAndManagerThrowsRuleViolation_ThenThrowsHttpBadRequest()
            {
                this.accesstokensManager.Setup(man => man.CreateAccessToken(It.IsAny<IRequest>(), It.IsAny<CreateAccessToken>()))
                    .Throws(new RuleViolationException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.BadRequest), () =>
                    this.service.Post(new CreateAccessToken()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenPostCreateAccessTokenAndManagerThrowsUnexpected_ThenThrowsHttpInternalServer()
            {
                this.accesstokensManager.Setup(man => man.CreateAccessToken(It.IsAny<IRequest>(), It.IsAny<CreateAccessToken>()))
                    .Throws(new InvalidOperationException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.InternalServerError), () =>
                    this.service.Post(new CreateAccessToken()));
            }

        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Net;
using Common.Services;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using Services.AuthZ.Services;
using Services.AuthZ.Workflow;
using Services.MessageContracts;
using ServiceStack;
using ServiceStack.Web;
using Testing.Common;

namespace Services.UnitTests.Services
{
    /// <summary>
    /// Tests the <see cref="ClientApplications"/> service interface class.
    /// </summary>
    /// <remarks>
    /// These tests are verifying basic plumbing, things like:
    /// 1. Rudimentary parameter validation (existence only)
    /// 2. Passing data through to workflow classes.
    /// 3. Handling of exceptions from workflow classes.
    /// 4. Returning correct HTTP response codes.
    /// </remarks>
    public partial class ClientApplicationsSpec
    {
        private static readonly IAssertion Assert = new Assertion();

        [TestClass]
        public partial class GivenTheClientApplicationsService
        {
            private ClientApplications service;
            private Mock<IClientApplicationsManager> clientapplicationsManager;

            [TestInitialize]
            public void InitalizeContext()
            {
                this.clientapplicationsManager = new Mock<IClientApplicationsManager>();
                this.service = new ClientApplications
                {
                    ClientApplicationsManager = this.clientapplicationsManager.Object,
                };
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenGetGetClientApplicationWithNullRequest_ThenThrows()
            {
                Assert.Throws<HttpError>("Parameter cannot be null", () =>
                    this.service.Get((GetClientApplication)null));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenGetGetClientApplicationWithNullManager_ThenThrows()
            {
                this.clientapplicationsManager.Setup(man => man.GetClientApplication(It.IsAny<IRequest>(), It.IsAny<GetClientApplication>()))
                    .Returns((GetClientApplicationResponse)null);

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.InternalServerError), () =>
                    this.service.Get(new GetClientApplication()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenGetGetClientApplication_ThenManagerReturnsClientApplication()
            {
                var response = new GetClientApplicationResponse();
                this.clientapplicationsManager.Setup(man => man.GetClientApplication(It.IsAny<IRequest>(), It.IsAny<GetClientApplication>()))
                    .Returns(response);

                var result = this.service.Get(new GetClientApplication());

                this.clientapplicationsManager.Verify(man => man.GetClientApplication(It.IsAny<IRequest>(), It.IsAny<GetClientApplication>()), Times.Once());
                Assert.Equal(response, result);
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenGetGetClientApplicationAndManagerThrowsResourceNotFound_ThenThrowsHttpNotFound()
            {
                this.clientapplicationsManager.Setup(man => man.GetClientApplication(It.IsAny<IRequest>(), It.IsAny<GetClientApplication>()))
                    .Throws(new ResourceNotFoundException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.NotFound), () =>
                    this.service.Get(new GetClientApplication()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenGetGetClientApplicationAndManagerThrowsRuleViolation_ThenThrowsHttpBadRequest()
            {
                this.clientapplicationsManager.Setup(man => man.GetClientApplication(It.IsAny<IRequest>(), It.IsAny<GetClientApplication>()))
                    .Throws(new RuleViolationException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.BadRequest), () =>
                    this.service.Get(new GetClientApplication()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenGetGetClientApplicationAndManagerThrowsUnexpected_ThenThrowsHttpInternalServer()
            {
                this.clientapplicationsManager.Setup(man => man.GetClientApplication(It.IsAny<IRequest>(), It.IsAny<GetClientApplication>()))
                    .Throws(new InvalidOperationException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.InternalServerError), () =>
                    this.service.Get(new GetClientApplication()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenPostCreateClientApplicationWithNullRequest_ThenThrows()
            {
                Assert.Throws<HttpError>("Parameter cannot be null", () =>
                    this.service.Post((CreateClientApplication)null));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenPostCreateClientApplicationWithNullManager_ThenThrows()
            {
                this.clientapplicationsManager.Setup(man => man.CreateClientApplication(It.IsAny<IRequest>(), It.IsAny<CreateClientApplication>()))
                    .Returns((CreateClientApplicationResponse)null);

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.InternalServerError), () =>
                    this.service.Post(new CreateClientApplication()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenPostCreateClientApplication_ThenManagerReturnsClientApplication()
            {
                var response = new CreateClientApplicationResponse();
                this.clientapplicationsManager.Setup(man => man.CreateClientApplication(It.IsAny<IRequest>(), It.IsAny<CreateClientApplication>()))
                    .Returns(response);

                var result = this.service.Post(new CreateClientApplication());

                this.clientapplicationsManager.Verify(man => man.CreateClientApplication(It.IsAny<IRequest>(), It.IsAny<CreateClientApplication>()), Times.Once());
                Assert.Equal(response, result);
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenPostCreateClientApplicationAndManagerThrowsResourceNotFound_ThenThrowsHttpNotFound()
            {
                this.clientapplicationsManager.Setup(man => man.CreateClientApplication(It.IsAny<IRequest>(), It.IsAny<CreateClientApplication>()))
                    .Throws(new ResourceNotFoundException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.NotFound), () =>
                    this.service.Post(new CreateClientApplication()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenPostCreateClientApplicationAndManagerThrowsRuleViolation_ThenThrowsHttpBadRequest()
            {
                this.clientapplicationsManager.Setup(man => man.CreateClientApplication(It.IsAny<IRequest>(), It.IsAny<CreateClientApplication>()))
                    .Throws(new RuleViolationException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.BadRequest), () =>
                    this.service.Post(new CreateClientApplication()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenPostCreateClientApplicationAndManagerThrowsUnexpected_ThenThrowsHttpInternalServer()
            {
                this.clientapplicationsManager.Setup(man => man.CreateClientApplication(It.IsAny<IRequest>(), It.IsAny<CreateClientApplication>()))
                    .Throws(new InvalidOperationException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.InternalServerError), () =>
                    this.service.Post(new CreateClientApplication()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenDeleteDeleteClientApplicationWithNullRequest_ThenThrows()
            {
                Assert.Throws<HttpError>("Parameter cannot be null", () =>
                    this.service.Delete((DeleteClientApplication)null));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenDeleteDeleteClientApplicationWithNullManager_ThenThrows()
            {
                this.clientapplicationsManager.Setup(man => man.DeleteClientApplication(It.IsAny<IRequest>(), It.IsAny<DeleteClientApplication>()))
                    .Returns((DeleteClientApplicationResponse)null);

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.InternalServerError), () =>
                    this.service.Delete(new DeleteClientApplication()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenDeleteDeleteClientApplication_ThenManagerReturnsClientApplication()
            {
                var response = new DeleteClientApplicationResponse();
                this.clientapplicationsManager.Setup(man => man.DeleteClientApplication(It.IsAny<IRequest>(), It.IsAny<DeleteClientApplication>()))
                    .Returns(response);

                var result = this.service.Delete(new DeleteClientApplication());

                this.clientapplicationsManager.Verify(man => man.DeleteClientApplication(It.IsAny<IRequest>(), It.IsAny<DeleteClientApplication>()), Times.Once());
                Assert.Equal(response, result);
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenDeleteDeleteClientApplicationAndManagerThrowsResourceNotFound_ThenThrowsHttpNotFound()
            {
                this.clientapplicationsManager.Setup(man => man.DeleteClientApplication(It.IsAny<IRequest>(), It.IsAny<DeleteClientApplication>()))
                    .Throws(new ResourceNotFoundException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.NotFound), () =>
                    this.service.Delete(new DeleteClientApplication()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenDeleteDeleteClientApplicationAndManagerThrowsRuleViolation_ThenThrowsHttpBadRequest()
            {
                this.clientapplicationsManager.Setup(man => man.DeleteClientApplication(It.IsAny<IRequest>(), It.IsAny<DeleteClientApplication>()))
                    .Throws(new RuleViolationException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.BadRequest), () =>
                    this.service.Delete(new DeleteClientApplication()));
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenDeleteDeleteClientApplicationAndManagerThrowsUnexpected_ThenThrowsHttpInternalServer()
            {
                this.clientapplicationsManager.Setup(man => man.DeleteClientApplication(It.IsAny<IRequest>(), It.IsAny<DeleteClientApplication>()))
                    .Throws(new InvalidOperationException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.FromHttpStatusCode(HttpStatusCode.InternalServerError), () =>
                    this.service.Delete(new DeleteClientApplication()));
            }

        }
    }
}